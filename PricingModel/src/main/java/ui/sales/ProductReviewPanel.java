/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.sales;

import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.ProductManagement.Product;
import model.ProductManagement.ProductCatalog;
import model.Supplier.Supplier;
import model.Supplier.SupplierDirectory;

/**
 *
 * @author HARSH
 */
public class ProductReviewPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private ProductCatalog productCatalog;
    private SupplierDirectory supplierDirectory;
    /**
     * Creates new form ProductReviewPanel
     */
    public ProductReviewPanel(JPanel userProcessContainer, ProductCatalog productCatalog,SupplierDirectory supplierDirectory) {
        this.userProcessContainer= userProcessContainer;
        this.productCatalog = productCatalog;
        this.supplierDirectory = supplierDirectory;
        initComponents();
        populateSupplierComboBox();
        populateProductReviewTable();
        setupTableClickListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnback = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbSupplier = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductReview = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 102, 0));
        setPreferredSize(new java.awt.Dimension(866, 605));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Review Product");

        btnback.setText("Back");
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        jLabel2.setText("Supplier");

        cmbSupplier.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupplierActionPerformed(evt);
            }
        });

        tblProductReview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product", "Floor", "Ceiling", "Target", "Average Actual"
            }
        ));
        jScrollPane1.setViewportView(tblProductReview);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbSupplier, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btnback)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 126, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(357, 357, 357))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnback)
                .addGap(47, 47, 47)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        // TODO add your handling code here:
         CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
        
        
    }//GEN-LAST:event_btnbackActionPerformed

    private void cmbSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupplierActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
         String selectedSupplier = (String) cmbSupplier.getSelectedItem();
    if (selectedSupplier != null) {
        Supplier supplier = supplierDirectory.findSupplier(selectedSupplier);
        if (supplier != null) {
            this.productCatalog = supplier.getProductCatalog();
            populateProductTable(); // Refresh table with new ProductCatalog
        } else {
            JOptionPane.showMessageDialog(this, "Supplier not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
        
        
    }//GEN-LAST:event_cmbSupplierActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnback;
    private javax.swing.JComboBox<String> cmbSupplier;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProductReview;
    // End of variables declaration//GEN-END:variables

    private void populateSupplierComboBox() {
        

 if (supplierDirectory == null) {
        System.out.println("SupplierDirectory is not initialized.");
        return;
    }

    ArrayList<Supplier> supplierList = supplierDirectory.getSuplierList();
    cmbSupplier.removeAllItems();
    for (Supplier supplier : supplierList) {
        cmbSupplier.addItem(supplier.getName());
    }
    }







//throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody

    private void populateProductReviewTable() {
       

       DefaultTableModel model = (DefaultTableModel) tblProductReview.getModel();
        model.setRowCount(0);

        for (Product product : productCatalog.getProductList()) {
            Object[] row = {
                product.getName(),
                product.getFloorPrice(),
                product.getCeilingPrice(),
                product.getTargetPrice(),
                (product.getFloorPrice() + product.getCeilingPrice()) / 2 // Average
            };
            model.addRow(row);
        }


    }





// throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody

    private void setupTableClickListener() {
       
         tblProductReview.getSelectionModel().addListSelectionListener(e -> {
        if (!e.getValueIsAdjusting() && tblProductReview.getSelectedRow() != -1) {
            analyzeSelectedProduct();
        }
    });
    }
         
         
         
       private void analyzeSelectedProduct() {
    int selectedRow = tblProductReview.getSelectedRow();

    if (selectedRow != -1) {
        // Retrieve data from the selected row
        String productName = tblProductReview.getValueAt(selectedRow, 0).toString();
        double targetPrice = Double.parseDouble(tblProductReview.getValueAt(selectedRow, 3).toString()); // Target price column index
        double averagePrice = Double.parseDouble(tblProductReview.getValueAt(selectedRow, 4).toString()); // Average price column index

        // Compare average price with target price
        String result;
        double difference = averagePrice - targetPrice;

        if (difference > 0) {
            result = String.format("Product '%s' is ABOVE the target price by $%.2f.", productName, difference);
        } else if (difference < 0) {
            result = String.format("Product '%s' is BELOW the target price by $%.2f.", productName, Math.abs(difference));
        } else {
            result = String.format("Product '%s' is exactly at the target price.", productName);
        }

        // Display the result in the analysis text field
        //txtAnalysis.setText(result);
    }
}



//throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody

   
       


        private void populateProductTable() {
    DefaultTableModel model = (DefaultTableModel) tblProductReview.getModel();
    model.setRowCount(0); // Clear existing rows

    if (productCatalog != null) {
        for (Product product : productCatalog.getProductList()) {
            Object[] row = {
                product.getName(),
                product.getFloorPrice(),
                product.getCeilingPrice(),
                product.getTargetPrice(),
                (product.getFloorPrice() + product.getCeilingPrice()) / 2 // Example: Average price
            };
            model.addRow(row);
        }
    } else {
        JOptionPane.showMessageDialog(this, "No products available for the selected supplier.", "Info", JOptionPane.INFORMATION_MESSAGE);
    }
}
        
        
        

// throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    
    }
    
    

